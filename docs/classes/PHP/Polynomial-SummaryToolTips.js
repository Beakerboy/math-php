NDSummary.OnToolTipsLoaded("PHPClass:Polynomial",{6:"<div class=\"NDToolTip TClass LPHP\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype6\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">Polynomial</div></div></div><div class=\"TTSummary\">A convenience class for one-dimension polynomials.</div></div>",8:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype8\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public function</span> __construct(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">array&nbsp;</td><td class=\"PNamePrefix\">$</td><td class=\"PName\">coefficients,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PNamePrefix\">$</td><td class=\"PName\">variable&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHString\">&quot;x&quot;</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">When a polynomial is instantiated, set the coefficients and degree of that polynomial as its object parameters.</div></div>",9:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype9\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public function</span> __toString(): <span class=\"SHKeyword\">string</span></div><div class=\"TTSummary\">When a polynomial is to be treated as a string, return it in a readable format.&nbsp; Example: $polynomial = new Polynomial([1, -8, 12, 3]); echo $polynomial; // prints \'x³ - 8x² + 12x + 3\'</div></div>",10:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype10\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public function</span> __invoke(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PNamePrefix first\">$</td><td class=\"PName last\">x₀</td></tr></table></td><td class=\"PAfterParameters\">): <span class=\"SHKeyword\">float</span></td></tr></table></div><div class=\"TTSummary\">When a polynomial is being evaluated at a point x₀, build a callback function and return the value of the callback function at x₀ Example: $polynomial = new Polynomial([1, -8, 12, 3]); echo $polynomial(4); // prints -13</div></div>",11:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype11\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private function</span> checkNumericOrPolynomial(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PNamePrefix first\">$</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">): Polynomial</td></tr></table></div><div class=\"TTSummary\">Check that our input is either a number or a Polynomial Convert any numbers to Polynomial objects</div></div>",12:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype12\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public function</span> getDegree(): <span class=\"SHKeyword\">int</span></div><div class=\"TTSummary\">Getter method for the degree of a polynomial</div></div>",13:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype13\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public function</span> getCoefficients(): array</div><div class=\"TTSummary\">Getter method for the coefficients of a polynomial</div></div>",14:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype14\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public function</span> getVariable(): <span class=\"SHKeyword\">string</span></div><div class=\"TTSummary\">Getter method for the dependent variable of a polynomial</div></div>",15:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype15\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public function</span> setVariable(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PNamePrefix\">$</td><td class=\"PName last\">variable</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Setter method for the dependent variable of a polynomial</div></div>",16:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype16\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public function</span> differentiate(): Polynomial</div><div class=\"TTSummary\">Calculate the derivative of a polynomial and return it as a new polynomial Example: $polynomial = new Polynomial([1, -8, 12, 3]); // x³ - 8x² + 12x + 3 $derivative = $polynomial-&gt;differentiate();&nbsp; // 3x² - 16x + 12</div></div>",17:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype17\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public function</span> integrate(): Polynomial</div><div class=\"TTSummary\">Calculate the indefinite integral of a polynomial and return it as a new polynomial Example: $polynomial = new Polynomial([3, -16, 12]); // 3x² - 16x + 12 $integral = $polynomial-&gt;integrate();&nbsp; // x³ - 8x² + 12x</div></div>",18:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype18\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public function</span> subtract(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PNamePrefix first\">$</td><td class=\"PName last\">polynomial</td></tr></table></td><td class=\"PAfterParameters\">): Polynomial</td></tr></table></div><div class=\"TTSummary\">Return a new polynomial that is the difference of the current polynomial and an input polynomial Example: $polynomial = new Polynomial([3, -16, 12]);&nbsp; // 3x² - 16x + 12 $integral&nbsp; = $polynomial-&gt;diferentiate();&nbsp; // 6x - 16 $difference = $polynomial-&gt;subtract($derivative);&nbsp; // 3x² - 22x + 28</div></div>",19:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype19\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public function</span> multiply(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PNamePrefix first\">$</td><td class=\"PName last\">polynomial</td></tr></table></td><td class=\"PAfterParameters\">): Polynomial</td></tr></table></div><div class=\"TTSummary\">Return a new polynomial that is the product of the current polynomial and an input polynomial Example: $polynomial = new Polynomial([2, -16]);&nbsp; // 2x - 16 $integral&nbsp; = $polynomial-&gt;integrate();&nbsp; // x² - 16x $product&nbsp; = $polynomial-&gt;multiply($integral);&nbsp; // 2x³ - 48x² + 256x</div></div>",20:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype20\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public function</span> negate(): Polynomial</div><div class=\"TTSummary\">Return a new polynomial that is the negated version.</div></div>",21:"<div class=\"NDToolTip TFunction LPHP\"><div id=\"NDPrototype21\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public function</span> roots(): array</div><div class=\"TTSummary\">Calculate the roots of a polynomial</div></div>"});